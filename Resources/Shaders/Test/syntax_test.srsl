ShaderType Spatial;

PolygonMode Fill;
CullMode
Back;
DepthCompare
LessOrEqual;
PrimitiveTopology
                TriangleList;
BlendEnabled false;
DepthWrite true;
DepthTest true;

         uniform
          vec3   color  ;
uniform   sampler2D
diffuse;

  struct  some_struct  {
vec3 pos;
vec2 uv;}   ;


vec3 change1 ( int i,   float    f )
   {
    return color * vec3(change2(), 1);
}

vec3 change2 ( int i,   float    f )
   {
    return change2() * vec3(UV, 1);
}


vec3 changeColor ( int i,   float    f )
   {
    return function() * vec3(UV, 1);
}

vec3 changeColor3   ( int i,   float    f ){return change2() * vec3(UV, 1);  return changeColor3(i, f) * vec3(UV, 1);  return function() * vec3(UV, 1); }


uniform   sampler2D
normal;

  struct  some_struct2  {
vec3 pos;
some_struct ss;;;
mat4 mat;
vec2     uv;}   ;

void fragment
(
 )     {
    if (a == a) { if (b == b) { a = b; } }
    ALBEDO = changeColor()   * texture(diffuse, UV) ;  ; ;; ;; ;
    if   (ALBEDO == ALBEDO)   {
    ALBEDO = changeColor() *     texture(diffuse, UV) ;  ; ;; ;; ;
    ALBEDO = changeColor() *     texture(diffuse, UV) ;  ; ;; ;; ;
    }
    ALBEDO = changeColor()   * texture(diffuse, UV) ;  ; ;; ;; ;
}

void vertex
() {
    VERTEX *= changeColor();
    if (VERTEX == 0) {
        VERTEX = 1;
    }

    if (VERTEX == 2)
        VERTEX = changeColor3();
}