// ------------------------------------------------[SRLS]------------------------------------------------

uniform vec3 color;
uniform sampler2D diffuse;

void fragment() {
    ALBEDO = color * texture(diffuse, TEXCOORD0);
}

void vertex() {
    VERTEX += color;
}

// ----------------------------------------------[GLSL VERT]----------------------------------------------

// begin default input

layout (location = 0) in vec3 POSITION;
layout (location = 1) in vec2 TEXCOORD0;
layout (location = 2) in vec3 NORMAL;
layout (location = 3) in vec3 TANGENT;
layout (location = 4) in vec3 BITANGENT;

layout (binding = 0) uniform mat4 MODEL_MATRIX;
layout (binding = 1) uniform mat4 VIEW_MATRIX;
layout (binding = 2) uniform mat4 PROJECTION_MATRIX;

// end default input

// begin default output

layout (location = 0) out vec3 FRAGMENT_POSITION;
layout (location = 1) out vec2 FRAGMENT_TEXCOORD0;
layout (location = 2) out vec3 FRAGMENT_NORMAL;
layout (location = 3) out vec3 FRAGMENT_TANGENT;
layout (location = 4) out vec3 FRAGMENT_BITANGENT;

// end default output

void main() {
    // begin default code

    FRAGMENT_POSITION = POSITION;
    FRAGMENT_TEXCOORD0 = TEXCOORD0;
    FRAGMENT_NORMAL = NORMAL;
    FRAGMENT_TANGENT = TANGENT;
    FRAGMENT_BITANGENT = BITANGENT;

    // end default code

    // begin default local variables

    vec3 VERTEX_POSITION = POSITION;
    vec2 VERTEX_TEXCOORD0 = TEXCOORD0;
    vec3 VERTEX_NORMAL = NORMAL;
    vec3 VERTEX_TANGENT = TANGENT;
    vec3 VERTEX_BITANGENT = BITANGENT;

    // end default local variables

    // begin platform code

    #if Vulkan
        VERTEX_POSITION.x = -VERTEX_POSITION.x;
    #endif

    // end platform code

    // begin vertex code segment (replace names)
    {
        VERTEX_POSITION += color;
    }
    // end vertex code segment

    gl_Position = PROJECTION_MATRIX * VIEW_MATRIX * MODEL_MATRIX * VERTEX_POSITION;
}

// ----------------------------------------------[GLSL FRAG]----------------------------------------------

void main() {

}

