ShaderType PostProcessing;

PolygonMode Fill;
CullMode Front;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleList;
BlendEnabled false;
DepthWrite false;
DepthTest false;

void fragment() {
    vec3 result = texture(COLOR_ATTACHMENT_0, UV).rgb;

    //result = pow(result, vec3(1.0 / 0.5));

    //vec3 color = vec3(1.2, 0.9, 1);
    COLOR_INDEX_0 = vec4(result, 1);
    //COLOR_INDEX_0 = vec4(texture(DEPTH_ATTACHMENT, UV).rgb, 1);
    //COLOR_INDEX_0 = vec4(UV, 1, 1);
}

void vertex() {
    UV = vec2((VERTEX_INDEX << 1) & 2, VERTEX_INDEX & 2);
    VERTEX = vec3(UV * 2.0 - 1.0, 0.0);
}