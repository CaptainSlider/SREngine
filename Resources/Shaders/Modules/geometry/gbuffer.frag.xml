<module name="gbuffer" type="fragment">
    <definitions>
        <LIGHTS_COUNT/>
    </definitions>
    <structs>
        <struct name="PointLight">
            <bool  var="Active"/>
            <vec3  var="Position"/>
            <vec3  var="Color"/>
            <float var="Radius"/>
        </struct>
    </structs>
</module>

<!--
<priority value="5"/>
#layout sampler2D gPosition
#layout sampler2D gNormal
#layout sampler2D gAlbedoSpec

#uniform(0) lighting
    PointLight lights[LIGHTS_COUNT]
    mat4 viewPos
#end

#in vec2 TexCoord

#segment out vec4 FragColor

#code
    // получаем информацию из G-буфера
    vec3 FragPos = texture(gPosition, TexCoord).rgb;
    vec3 Normal = texture(gNormal, TexCoord).rgb;
    vec3 Albedo = texture(gAlbedoSpec, TexCoord).rgb;
    float Specular = texture(gAlbedoSpec, TexCoord).a;

    // вычисляем освещение
    vec3 lighting = Albedo * 0.1; // хардкодим фоновое освещение
    vec3 viewDir = normalize(viewPos - FragPos);
    for(int i = 0; i < LIGHTS_COUNT; ++i)
    {
        if (!lights.Active[i])
            break;

        // находим расстояние от текущего фрагмента до источника света
        float distance = length(lights[i].Position - FragPos);
        if(distance < lights[i].Radius)
        {
            // рассеянное освещение
            vec3 lightDir = normalize(lights[i].Position - FragPos);
            vec3 diffuse = max(dot(Normal, lightDir), 0.0) * Albedo * lights[i].Color;
            lighting += diffuse;
        }
    }

    FragColor = vec4(lighting, 1.0);
#end-->
