ShaderType Skinned;

PolygonMode Fill;
CullMode Back;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleList;
BlendEnabled false; 
DepthWrite true;
DepthTest true;

uniform vec4 color;
uniform sampler2D diffuse;

void fragment() {
    vec3 diffuse_albedo = texture(diffuse, UV).rgb * color.rgb;

    vec3 norm = vec3(NORMAL.x + NORMAL.y + NORMAL.z) / 12.0; //TODO::Переписать под костевую анимацию, нужно пересчитать NORMAL

	COLOR = vec4(diffuse_albedo + norm, 1.0);

}

void vertex() {
    //BONE_TRANSFORM = mat4(1); //TODO::А мы точно должны весы передавать как float векторы, из-за чего приходится к

    //if (WEIGHT0[1] > 0.0) {
    //    BONE_TRANSFORM += SKELETON_MATRICES_128[int(WEIGHT0[0])] * WEIGHT0[1];
    //}

    //if (WEIGHT1[1] > 0.0) {
    //    BONE_TRANSFORM += SKELETON_MATRICES_128[int(WEIGHT1[0])] * WEIGHT1[1];
    //}

    BONE_TRANSFORM = SKELETON_MATRICES_128[int(WEIGHT0[0])] * WEIGHT0[1];
    BONE_TRANSFORM += SKELETON_MATRICES_128[int(WEIGHT1[0])] * WEIGHT1[1];
    BONE_TRANSFORM += SKELETON_MATRICES_128[int(WEIGHT2[0])] * WEIGHT2[1];
    BONE_TRANSFORM += SKELETON_MATRICES_128[int(WEIGHT3[0])] * WEIGHT3[1];
    BONE_TRANSFORM += SKELETON_MATRICES_128[int(WEIGHT4[0])] * WEIGHT4[1];
    BONE_TRANSFORM += SKELETON_MATRICES_128[int(WEIGHT5[0])] * WEIGHT5[1];
    BONE_TRANSFORM += SKELETON_MATRICES_128[int(WEIGHT6[0])] * WEIGHT6[1];
    BONE_TRANSFORM += SKELETON_MATRICES_128[int(WEIGHT7[0])] * WEIGHT7[1];

    BONE_TRANSFORM = MODEL_MATRIX * BONE_TRANSFORM;
}