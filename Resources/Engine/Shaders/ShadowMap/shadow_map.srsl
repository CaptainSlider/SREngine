ShaderType PostProcessing;

PolygonMode Fill;
CullMode Back;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleList;
BlendEnabled false;
DepthWrite false;
DepthTest false;

[[uniform]] sampler2D depthMap;
[[shared]] vec2 uv;

float LinearizeDepth(float z)
{
  float n = 1.0; // camera z near
  float f = 100.0; // camera z far
  return (2.0 * n) / (f + n - z * (f - n));
}

void fragment() {
    vec4 color = texture(depthMap, uv);

    if (color.r <= 0) {
        discard;
    }

    float depth = 1 - LinearizeDepth(color.r);

    COLOR_INDEX_0 = vec4(depth, depth, depth, 1.0);
}

void vertex() {
    uv = vec2((VERTEX_INDEX << 1) & 2, VERTEX_INDEX & 2);
    OUT_POSITION = vec4(uv * 2.0 - 1.0, 0.0, 1.0);
}