/** )(*/
#include <Test/Shaders/some_inc_1.srsl>

//// Lexer/Parser -> LexicalAnalyze -> PreProcessor -> RefAnalyze

ShaderType Spatial;

PolygonMode Fill;
CullMode Back;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleList;
BlendEnabled false;
DepthWrite true;
DepthTest true;

/// макрос по аналогии с С и С++
#procedure ABOBA(x, y, z, r) {
    r = x + y + z;
}

#procedure SUM(a, b) { a + b }

/// подстановка любого значния
#define BOOLEAN_VALUE = true;

#define INT_VALUE = SUM(2, 5);

#procedure CONDITION(argument) {
    #define SOME_VALUE = 123;
    #procedure SOME_PROC() { int i = SOME_VALUE; }
    #if (argument == 0.5) {
        int b = 111;
    }
    #else {
       int c = 222;
    }

    #if (INT_VALUE == 7) {
        int i = INT_VALUE;
    }
    #else {
        int i = 0;
    }
}

/*uniform vec4 color;*/
[[uniform], [private]] vec4 color;
[[uniform], [public]] sampler2D diffuse;
[[shared]] vec4 sharedVar;

vec3 math(vec3 a, vec3 b, vec3 c) {
    return a + b - c;
}

[[numThreads(2, 4, 8)]] void compute() {
    int i[4] = { 1, 2, 3, 4 };
    i[1] = 33;

    if (true) {

    }
    else if (true) {

    }
    else {

    }
}

void fragment() {
   // vec3 diffuse_albedo = texture(diffuse, UV).rgb * color.rgb; ///
   // vec3 diffuse_albedo = texture(diffuse, UV).rgb * color.rgb; ///
    //vec3 diffuse_albedo = texture(diffuse, UV).rgb * color.rgb;
    vec3 diffuse_albedo = texture(diffuse, UV).rgb * color.rgb;
/*

ad
a sd
    vec3 norm = vec3(NORMAL.x + NORMAL.y + NORMAL.z) / 12.0;*/
	COLOR = vec4(diffuse_albedo + norm, 1.0);
}
///
void vertex() {

}/** )(*/